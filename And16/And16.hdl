/**
 * 16-bit-wise and gate: for i = 0..15: out[i] = a[i] and b[i]
 */

CHIP And16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    // By using Nand gates, we can implement And16 gate
    Nand(a=a[0], b=b[0], out=out[0]);
    Not(in=out[0], out=out[0]);
    Nand(a=a[1], b=b[1], out=out[1]);
    Not(in=out[1], out=out[1]);
    Nand(a=a[2], b=b[2], out=out[2]);
    Not(in=out[2], out=out[2]);
    Nand(a=a[3], b=b[3], out=out[3]);
    Not(in=out[3], out=out[3]);
    Nand(a=a[4], b=b[4], out=out[4]);
    Not(in=out[4], out=out[4]);
    Nand(a=a[5], b=b[5], out=out[5]);
    Not(in=out[5], out=out[5]);
    Nand(a=a[6], b=b[6], out=out[6]);
    Not(in=out[6], out=out[6]);
    Nand(a=a[7], b=b[7], out=out[7]);
    Not(in=out[7], out=out[7]);
    Nand(a=a[8], b=b[8], out=out[8]);
    Not(in=out[8], out=out[8]);
    Nand(a=a[9], b=b[9], out=out[9]);
    Not(in=out[9], out=out[9]);
    Nand(a=a[10], b=b[10], out=out[10]);
    Not(in=out[10], out=out[10]);
    Nand(a=a[11], b=b[11], out=out[11]);
    Not(in=out[11], out=out[11]);
    Nand(a=a[12], b=b[12], out=out[12]);
    Not(in=out[12], out=out[12]);
    Nand(a=a[13], b=b[13], out=out[13]);
    Not(in=out[13], out=out[13]);
    Nand(a=a[14], b=b[14], out=out[14]);
    Not(in=out[14], out=out[14]);
    Nand(a=a[15], b=b[15], out=out[15]);
    Not(in=out[15], out=out[15]);
}